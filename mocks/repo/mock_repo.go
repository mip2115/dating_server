// Code generated by MockGen. DO NOT EDIT.
// Source: code.mine/dating_server/repo (interfaces: Repo)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	types "code.mine/dating_server/types"
	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	options "go.mongodb.org/mongo-driver/mongo/options"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// CheckUserLoginPasswordByEmail mocks base method.
func (m *MockRepo) CheckUserLoginPasswordByEmail(arg0, arg1 *string) (*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserLoginPasswordByEmail", arg0, arg1)
	ret0, _ := ret[0].(*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserLoginPasswordByEmail indicates an expected call of CheckUserLoginPasswordByEmail.
func (mr *MockRepoMockRecorder) CheckUserLoginPasswordByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserLoginPasswordByEmail", reflect.TypeOf((*MockRepo)(nil).CheckUserLoginPasswordByEmail), arg0, arg1)
}

// CreateImage mocks base method.
func (m *MockRepo) CreateImage(arg0 *types.Image) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateImage indicates an expected call of CreateImage.
func (mr *MockRepoMockRecorder) CreateImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImage", reflect.TypeOf((*MockRepo)(nil).CreateImage), arg0)
}

// CreateMatch mocks base method.
func (m *MockRepo) CreateMatch(arg0 *types.Match) (*types.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMatch", arg0)
	ret0, _ := ret[0].(*types.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMatch indicates an expected call of CreateMatch.
func (mr *MockRepoMockRecorder) CreateMatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMatch", reflect.TypeOf((*MockRepo)(nil).CreateMatch), arg0)
}

// CreateTrackedLike mocks base method.
func (m *MockRepo) CreateTrackedLike(arg0 *types.TrackedLike) (*types.TrackedLike, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrackedLike", arg0)
	ret0, _ := ret[0].(*types.TrackedLike)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrackedLike indicates an expected call of CreateTrackedLike.
func (mr *MockRepoMockRecorder) CreateTrackedLike(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrackedLike", reflect.TypeOf((*MockRepo)(nil).CreateTrackedLike), arg0)
}

// CreateUser mocks base method.
func (m *MockRepo) CreateUser(arg0 *types.User) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepoMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepo)(nil).CreateUser), arg0)
}

// DeleteImage mocks base method.
func (m *MockRepo) DeleteImage(arg0 *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockRepoMockRecorder) DeleteImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockRepo)(nil).DeleteImage), arg0)
}

// DeleteMatchByMatchUUID mocks base method.
func (m *MockRepo) DeleteMatchByMatchUUID(arg0 *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMatchByMatchUUID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMatchByMatchUUID indicates an expected call of DeleteMatchByMatchUUID.
func (mr *MockRepoMockRecorder) DeleteMatchByMatchUUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMatchByMatchUUID", reflect.TypeOf((*MockRepo)(nil).DeleteMatchByMatchUUID), arg0)
}

// DeleteTrackedLikeByMatchUUID mocks base method.
func (m *MockRepo) DeleteTrackedLikeByMatchUUID(arg0 *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTrackedLikeByMatchUUID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTrackedLikeByMatchUUID indicates an expected call of DeleteTrackedLikeByMatchUUID.
func (mr *MockRepoMockRecorder) DeleteTrackedLikeByMatchUUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrackedLikeByMatchUUID", reflect.TypeOf((*MockRepo)(nil).DeleteTrackedLikeByMatchUUID), arg0)
}

// DeleteUserByUUID mocks base method.
func (m *MockRepo) DeleteUserByUUID(arg0 *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByUUID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByUUID indicates an expected call of DeleteUserByUUID.
func (mr *MockRepoMockRecorder) DeleteUserByUUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByUUID", reflect.TypeOf((*MockRepo)(nil).DeleteUserByUUID), arg0)
}

// GetImageByImageUUID mocks base method.
func (m *MockRepo) GetImageByImageUUID(arg0 *string) (*types.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageByImageUUID", arg0)
	ret0, _ := ret[0].(*types.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageByImageUUID indicates an expected call of GetImageByImageUUID.
func (mr *MockRepoMockRecorder) GetImageByImageUUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageByImageUUID", reflect.TypeOf((*MockRepo)(nil).GetImageByImageUUID), arg0)
}

// GetImagesByUserUUID mocks base method.
func (m *MockRepo) GetImagesByUserUUID(arg0 *string) ([]*types.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImagesByUserUUID", arg0)
	ret0, _ := ret[0].([]*types.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImagesByUserUUID indicates an expected call of GetImagesByUserUUID.
func (mr *MockRepoMockRecorder) GetImagesByUserUUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImagesByUserUUID", reflect.TypeOf((*MockRepo)(nil).GetImagesByUserUUID), arg0)
}

// GetMessagesByMatchUUID mocks base method.
func (m *MockRepo) GetMessagesByMatchUUID(arg0, arg1 int, arg2 *string) ([]*types.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagesByMatchUUID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*types.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesByMatchUUID indicates an expected call of GetMessagesByMatchUUID.
func (mr *MockRepoMockRecorder) GetMessagesByMatchUUID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesByMatchUUID", reflect.TypeOf((*MockRepo)(nil).GetMessagesByMatchUUID), arg0, arg1, arg2)
}

// GetTrackedLikeByUserUUID mocks base method.
func (m *MockRepo) GetTrackedLikeByUserUUID(arg0, arg1 *string) (*types.TrackedLike, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrackedLikeByUserUUID", arg0, arg1)
	ret0, _ := ret[0].(*types.TrackedLike)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrackedLikeByUserUUID indicates an expected call of GetTrackedLikeByUserUUID.
func (mr *MockRepoMockRecorder) GetTrackedLikeByUserUUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrackedLikeByUserUUID", reflect.TypeOf((*MockRepo)(nil).GetTrackedLikeByUserUUID), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockRepo) GetUserByEmail(arg0 *string) (*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0)
	ret0, _ := ret[0].(*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockRepoMockRecorder) GetUserByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockRepo)(nil).GetUserByEmail), arg0)
}

// GetUserByUUID mocks base method.
func (m *MockRepo) GetUserByUUID(arg0 *string) (*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUUID", arg0)
	ret0, _ := ret[0].(*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUUID indicates an expected call of GetUserByUUID.
func (mr *MockRepoMockRecorder) GetUserByUUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUUID", reflect.TypeOf((*MockRepo)(nil).GetUserByUUID), arg0)
}

// GetUsersByFilter mocks base method.
func (m *MockRepo) GetUsersByFilter(arg0 *primitive.M, arg1 *options.FindOptions) ([]*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByFilter", arg0, arg1)
	ret0, _ := ret[0].([]*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByFilter indicates an expected call of GetUsersByFilter.
func (mr *MockRepoMockRecorder) GetUsersByFilter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByFilter", reflect.TypeOf((*MockRepo)(nil).GetUsersByFilter), arg0, arg1)
}

// GetVideosByAllUserUUIDs mocks base method.
func (m *MockRepo) GetVideosByAllUserUUIDs(arg0 []*string) ([]*types.UserVideoItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideosByAllUserUUIDs", arg0)
	ret0, _ := ret[0].([]*types.UserVideoItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideosByAllUserUUIDs indicates an expected call of GetVideosByAllUserUUIDs.
func (mr *MockRepoMockRecorder) GetVideosByAllUserUUIDs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideosByAllUserUUIDs", reflect.TypeOf((*MockRepo)(nil).GetVideosByAllUserUUIDs), arg0)
}

// GetVideosByUserUUID mocks base method.
func (m *MockRepo) GetVideosByUserUUID(arg0 *string) ([]*types.UserVideoItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideosByUserUUID", arg0)
	ret0, _ := ret[0].([]*types.UserVideoItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideosByUserUUID indicates an expected call of GetVideosByUserUUID.
func (mr *MockRepoMockRecorder) GetVideosByUserUUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideosByUserUUID", reflect.TypeOf((*MockRepo)(nil).GetVideosByUserUUID), arg0)
}

// SaveMatch mocks base method.
func (m *MockRepo) SaveMatch(arg0 *types.Match) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMatch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMatch indicates an expected call of SaveMatch.
func (mr *MockRepoMockRecorder) SaveMatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMatch", reflect.TypeOf((*MockRepo)(nil).SaveMatch), arg0)
}

// SaveMessage mocks base method.
func (m *MockRepo) SaveMessage(arg0 *types.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMessage indicates an expected call of SaveMessage.
func (mr *MockRepoMockRecorder) SaveMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMessage", reflect.TypeOf((*MockRepo)(nil).SaveMessage), arg0)
}

// UpdateTrackedLikeByUUID mocks base method.
func (m *MockRepo) UpdateTrackedLikeByUUID(arg0 *string, arg1, arg2 primitive.M) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTrackedLikeByUUID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTrackedLikeByUUID indicates an expected call of UpdateTrackedLikeByUUID.
func (mr *MockRepoMockRecorder) UpdateTrackedLikeByUUID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrackedLikeByUUID", reflect.TypeOf((*MockRepo)(nil).UpdateTrackedLikeByUUID), arg0, arg1, arg2)
}

// UpdateUserByUUID mocks base method.
func (m *MockRepo) UpdateUserByUUID(arg0 *string, arg1 []primitive.M) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserByUUID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserByUUID indicates an expected call of UpdateUserByUUID.
func (mr *MockRepoMockRecorder) UpdateUserByUUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserByUUID", reflect.TypeOf((*MockRepo)(nil).UpdateUserByUUID), arg0, arg1)
}
